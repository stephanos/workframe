'use strict';

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _dispatcher = require('./dispatcher');

var _dispatcher2 = _interopRequireDefault(_dispatcher);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let dispatcher;
let collector;

describe('Dispatcher', () => {
  beforeEach(() => {
    collector = {
      add: _sinon2.default.spy()
    };

    const nextId = _sinon2.default.stub();
    nextId.onFirstCall().returns(1);
    nextId.onSecondCall().returns(2);
    const idGenerator = {
      next: nextId
    };

    const clock = {
      now: _sinon2.default.stub().returns(1234567890)
    };

    dispatcher = new _dispatcher2.default(null, collector, idGenerator, clock);
  });

  describe('should invoke', () => {
    it('method', () => {
      let called;
      let Component = class Component {
        doSomething() {
          called = true;
        }
      };


      const comp = new Component();
      dispatcher.invoke({}, comp, comp.doSomething, []);

      _assert2.default.ok(called);
    });

    it('method with for of dispatcher as first argument', () => {
      let args;
      let Component = class Component {
        doSomething() {
          args = arguments;
        }
      };


      const comp = new Component();
      dispatcher.invoke({}, comp, comp.doSomething, []);

      _assert2.default.equal(args[0].id, 2);
      _assert2.default.equal(args[0].parentId, 1);
    });

    it('method and return its value', () => {
      let Component = class Component {
        doSomething() {
          return 42;
        }
      };


      const comp = new Component();
      const ret = dispatcher.invoke({}, comp, comp.doSomething, []);

      _assert2.default.equal(ret, 42);
    });

    it('method and yield thrown exception', () => {
      let Component = class Component {
        doSomething() {
          throw new Error('oops');
        }
      };


      const comp = new Component();
      _assert2.default.throws(() => dispatcher.invoke({}, comp, comp.doSomething, []), Error);
    });
  });

  describe('should track', () => {
    it('invocation call', () => {
      let Component = class Component {
        doSomething() {
          return 42;
        }
      };


      const comp = new Component();
      dispatcher.invoke({}, comp, comp.doSomething, []);

      _assert2.default.deepEqual(collector.add.firstCall.args, [{
        id: 1,
        parentId: null,
        component: 'Component',
        method: 'doSomething',
        arguments: [],
        time: 1234567890
      }]);
    });

    it('invocation call with arguments', () => {
      let Component = class Component {
        doSomething() {
          return 42;
        }
      };


      const comp = new Component();
      dispatcher.invoke({}, comp, comp.doSomething, ['arg1', 'arg2']);

      _assert2.default.deepEqual(collector.add.firstCall.args, [{
        id: 1,
        parentId: null,
        component: 'Component',
        method: 'doSomething',
        arguments: ['arg1', 'arg2'],
        time: 1234567890
      }]);
    });

    it('invocation result', () => {
      let Component = class Component {
        doSomething() {
          return 42;
        }
      };


      const comp = new Component();
      dispatcher.invoke({}, comp, comp.doSomething, []);

      _assert2.default.deepEqual(collector.add.secondCall.args, [{
        id: 1,
        result: 42,
        time: 1234567890
      }]);
    });

    it('invocation exception', () => {
      let Component = class Component {
        doSomething() {
          throw new Error('oops');
        }
      };


      const comp = new Component();
      try {
        dispatcher.invoke({}, comp, comp.doSomething, []);
      } catch (err) {
        // ignore
      }

      _assert2.default.deepEqual(collector.add.secondCall.args, [{
        id: 1,
        error: new Error('oops'),
        time: 1234567890
      }]);
    });
  });
});
//# sourceMappingURL=data:application/json;base64,

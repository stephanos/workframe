'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _lodash = require('lodash');

var _errors = require('./errors');

var _component = require('./component');

var _component2 = _interopRequireDefault(_component);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getTypeFor(input, types) {
  const inputName = input.name;
  for (const type of types) {
    if ((0, _lodash.endsWith)(inputName, type.typeName)) {
      return type;
    }
  }
  throw new _errors.CreateComponentError(`'${ inputName }' is not a known type`);
}

function getNameFor(input, type) {
  return input.name.slice(0, -type.typeName.length);
}

let ComponentFactory = class ComponentFactory {

  constructor(types, registry, validator) {
    this._componentsSortedByCreation = [];

    this.types = types;
    this.registry = registry;
    this.validator = validator;
  }

  build(input, opts) {
    const component = new _component2.default(input);
    this._componentsSortedByCreation.push(component);

    component.opts = opts;

    component.type = getTypeFor(input, this.types);
    component.type.verify(input);
    if (component.type.addRelation) {
      component.type.addRelation(this.registry, input, opts);
    }

    component.name = getNameFor(input, component.type);
    this.validator.validateName(input, component.name);

    this.validator.validateDependencies(input, component.type, component.dependencies);

    this.registry.add(component);

    return component;
  }

  get componentsSortedByCreation() {
    return this._componentsSortedByCreation;
  }
};
exports.default = ComponentFactory;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImludGVybmFsL2NvbXBvbmVudC9mYWN0b3J5LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFNQSxTQUFTLFVBQVQsQ0FBb0IsS0FBcEIsRUFBMkIsS0FBM0IsRUFBa0M7QUFDaEMsUUFBTSxZQUFZLE1BQU0sSUFBTixDQURjO0FBRWhDLE9BQUssTUFBTSxJQUFOLElBQWMsS0FBbkIsRUFBMEI7QUFDeEIsUUFBSSxzQkFBUyxTQUFULEVBQW9CLEtBQUssUUFBTCxDQUF4QixFQUF3QztBQUN0QyxhQUFPLElBQVAsQ0FEc0M7S0FBeEM7R0FERjtBQUtBLFFBQU0saUNBQXlCLENBQUMsQ0FBRCxHQUFJLFNBQUosRUFBYyxxQkFBZCxDQUF6QixDQUFOLENBUGdDO0NBQWxDOztBQVdBLFNBQVMsVUFBVCxDQUFvQixLQUFwQixFQUEyQixJQUEzQixFQUFpQztBQUMvQixTQUFPLE1BQU0sSUFBTixDQUFXLEtBQVgsQ0FBaUIsQ0FBakIsRUFBb0IsQ0FBQyxLQUFLLFFBQUwsQ0FBYyxNQUFkLENBQTVCLENBRCtCO0NBQWpDOztJQUtNLG1CQUFOLE1BQU0sZ0JBQU4sQ0FBdUI7O0FBSXJCLGNBQVksS0FBWixFQUFtQixRQUFuQixFQUE2QixTQUE3QixFQUF3QztTQUZ4Qyw4QkFBOEIsR0FFVTs7QUFDdEMsU0FBSyxLQUFMLEdBQWEsS0FBYixDQURzQztBQUV0QyxTQUFLLFFBQUwsR0FBZ0IsUUFBaEIsQ0FGc0M7QUFHdEMsU0FBSyxTQUFMLEdBQWlCLFNBQWpCLENBSHNDO0dBQXhDOztBQU1BLFFBQU0sS0FBTixFQUFhLElBQWIsRUFBbUI7QUFDakIsVUFBTSxZQUFZLHdCQUFjLEtBQWQsQ0FBWixDQURXO0FBRWpCLFNBQUssMkJBQUwsQ0FBaUMsSUFBakMsQ0FBc0MsU0FBdEMsRUFGaUI7O0FBSWpCLGNBQVUsSUFBVixHQUFpQixJQUFqQixDQUppQjs7QUFNakIsY0FBVSxJQUFWLEdBQWlCLFdBQVcsS0FBWCxFQUFrQixLQUFLLEtBQUwsQ0FBbkMsQ0FOaUI7QUFPakIsY0FBVSxJQUFWLENBQWUsTUFBZixDQUFzQixLQUF0QixFQVBpQjtBQVFqQixRQUFJLFVBQVUsSUFBVixDQUFlLFdBQWYsRUFBNEI7QUFDOUIsZ0JBQVUsSUFBVixDQUFlLFdBQWYsQ0FBMkIsS0FBSyxRQUFMLEVBQWUsS0FBMUMsRUFBaUQsSUFBakQsRUFEOEI7S0FBaEM7O0FBSUEsY0FBVSxJQUFWLEdBQWlCLFdBQVcsS0FBWCxFQUFrQixVQUFVLElBQVYsQ0FBbkMsQ0FaaUI7QUFhakIsU0FBSyxTQUFMLENBQWUsWUFBZixDQUE0QixLQUE1QixFQUFtQyxVQUFVLElBQVYsQ0FBbkMsQ0FiaUI7O0FBZWpCLFNBQUssU0FBTCxDQUFlLG9CQUFmLENBQW9DLEtBQXBDLEVBQTJDLFVBQVUsSUFBVixFQUFnQixVQUFVLFlBQVYsQ0FBM0QsQ0FmaUI7O0FBaUJqQixTQUFLLFFBQUwsQ0FBYyxHQUFkLENBQWtCLFNBQWxCLEVBakJpQjs7QUFtQmpCLFdBQU8sU0FBUCxDQW5CaUI7R0FBbkI7O0FBc0JBLE1BQUksMEJBQUosR0FBaUM7QUFDL0IsV0FBTyxLQUFLLDJCQUFMLENBRHdCO0dBQWpDO0NBaENGO2tCQXNDZSIsImZpbGUiOiJpbnRlcm5hbC9jb21wb25lbnQvZmFjdG9yeS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGVuZHNXaXRoIH0gZnJvbSAnbG9kYXNoJztcblxuaW1wb3J0IHsgQ3JlYXRlQ29tcG9uZW50RXJyb3IgfSBmcm9tICcuL2Vycm9ycyc7XG5pbXBvcnQgQ29tcG9uZW50IGZyb20gJy4vY29tcG9uZW50JztcblxuXG5mdW5jdGlvbiBnZXRUeXBlRm9yKGlucHV0LCB0eXBlcykge1xuICBjb25zdCBpbnB1dE5hbWUgPSBpbnB1dC5uYW1lO1xuICBmb3IgKGNvbnN0IHR5cGUgb2YgdHlwZXMpIHtcbiAgICBpZiAoZW5kc1dpdGgoaW5wdXROYW1lLCB0eXBlLnR5cGVOYW1lKSkge1xuICAgICAgcmV0dXJuIHR5cGU7XG4gICAgfVxuICB9XG4gIHRocm93IG5ldyBDcmVhdGVDb21wb25lbnRFcnJvcihgJyR7aW5wdXROYW1lfScgaXMgbm90IGEga25vd24gdHlwZWApO1xufVxuXG5cbmZ1bmN0aW9uIGdldE5hbWVGb3IoaW5wdXQsIHR5cGUpIHtcbiAgcmV0dXJuIGlucHV0Lm5hbWUuc2xpY2UoMCwgLXR5cGUudHlwZU5hbWUubGVuZ3RoKTtcbn1cblxuXG5jbGFzcyBDb21wb25lbnRGYWN0b3J5IHtcblxuICBfY29tcG9uZW50c1NvcnRlZEJ5Q3JlYXRpb24gPSBbXTtcblxuICBjb25zdHJ1Y3Rvcih0eXBlcywgcmVnaXN0cnksIHZhbGlkYXRvcikge1xuICAgIHRoaXMudHlwZXMgPSB0eXBlcztcbiAgICB0aGlzLnJlZ2lzdHJ5ID0gcmVnaXN0cnk7XG4gICAgdGhpcy52YWxpZGF0b3IgPSB2YWxpZGF0b3I7XG4gIH1cblxuICBidWlsZChpbnB1dCwgb3B0cykge1xuICAgIGNvbnN0IGNvbXBvbmVudCA9IG5ldyBDb21wb25lbnQoaW5wdXQpO1xuICAgIHRoaXMuX2NvbXBvbmVudHNTb3J0ZWRCeUNyZWF0aW9uLnB1c2goY29tcG9uZW50KTtcblxuICAgIGNvbXBvbmVudC5vcHRzID0gb3B0cztcblxuICAgIGNvbXBvbmVudC50eXBlID0gZ2V0VHlwZUZvcihpbnB1dCwgdGhpcy50eXBlcyk7XG4gICAgY29tcG9uZW50LnR5cGUudmVyaWZ5KGlucHV0KTtcbiAgICBpZiAoY29tcG9uZW50LnR5cGUuYWRkUmVsYXRpb24pIHtcbiAgICAgIGNvbXBvbmVudC50eXBlLmFkZFJlbGF0aW9uKHRoaXMucmVnaXN0cnksIGlucHV0LCBvcHRzKTtcbiAgICB9XG5cbiAgICBjb21wb25lbnQubmFtZSA9IGdldE5hbWVGb3IoaW5wdXQsIGNvbXBvbmVudC50eXBlKTtcbiAgICB0aGlzLnZhbGlkYXRvci52YWxpZGF0ZU5hbWUoaW5wdXQsIGNvbXBvbmVudC5uYW1lKTtcblxuICAgIHRoaXMudmFsaWRhdG9yLnZhbGlkYXRlRGVwZW5kZW5jaWVzKGlucHV0LCBjb21wb25lbnQudHlwZSwgY29tcG9uZW50LmRlcGVuZGVuY2llcyk7XG5cbiAgICB0aGlzLnJlZ2lzdHJ5LmFkZChjb21wb25lbnQpO1xuXG4gICAgcmV0dXJuIGNvbXBvbmVudDtcbiAgfVxuXG4gIGdldCBjb21wb25lbnRzU29ydGVkQnlDcmVhdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fY29tcG9uZW50c1NvcnRlZEJ5Q3JlYXRpb247XG4gIH1cbn1cblxuXG5leHBvcnQgZGVmYXVsdCBDb21wb25lbnRGYWN0b3J5O1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
